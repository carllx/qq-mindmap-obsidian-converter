---
description: |本规则定义了 QQmindmap2Obsidian 项目的核心哲学和根本原因问题解决方法。强调在 Markdown 与 QQ 思维导图双向转换中，优先分析和解决底层架构与数据完整性问题，避免表面性修复。所有设计和实现应以可逆性、数据保真度、可维护性和可测试性为核心目标，确保系统的长期可持续发展。
alwaysApply: false
---
# 核心哲学：根本原因问题解决

**始终在本质上解决问题，而不是通过表面的变通方法。**

## 🎯 基本原则

### 深度分析优先
- 在实施任何解决方案之前，分析问题的根本原因
- 理解底层数据结构和系统交互
- 考虑架构影响而非局部修复

### 架构驱动设计
- 考虑变更如何影响整体系统架构
- 优先选择预防未来问题的可持续解决方案
- 确保双向转换保持完整的数据保真度

### 数据完整性
- 确保 MD↔QQ 转换的可逆性
- 保持语义含义而不仅仅是语法
- 处理边缘情况和不寻常输入

## 🔍 问题解决方法

### 1. 根本原因分析
- **为什么这个问题存在？**
- **底层数据结构是什么？**
- **系统如何交互？**

### 2. 解决方案设计
- **架构影响**：这如何影响整体系统？
- **数据流**：数据如何通过转换管道流动？
- **错误处理**：可能出现什么问题以及如何处理？

### 3. 实施策略
- **增量式**：以小而可验证的步骤构建和测试
- **向后兼容**：维护现有功能
- **可测试**：每个变更都应该是可验证的

## 🚀 成功指标

### 代码质量
- **可维护性**：代码应该易于理解和修改
- **可测试性**：所有功能都应该是可验证的
- **性能**：转换应该快速高效
- **可靠性**：系统应该优雅地处理边缘情况

### 用户体验
- **准确性**：转换应该保留所有重要信息
- **速度**：转换应该快速完成
- **反馈**：用户应该知道发生了什么以及是否有问题
- **直观性**：系统应该按用户期望工作 
