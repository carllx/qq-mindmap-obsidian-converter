---
description: 定义项目的模块化架构设计原则，包括单一职责、低耦合高内聚、模板驱动开发等核心概念。涵盖代码组织结构、技术栈考虑、设计模式应用和开发指南，确保系统具有良好的可维护性和可扩展性。
alwaysApply: false
---

# 架构原则

## 🏗️ 模块化设计

### 单一职责原则
- 每个模块都有明确的单一目的
- 避免模块承担过多责任
- 清晰的模块边界和接口

### 低耦合高内聚
- **低耦合**：最小化模块间依赖
- **高内聚**：相关功能保持在一起
- **模板驱动**：使用模板系统进行可维护的构建

## 📁 代码组织结构

```
core/
├── parsers/     # 数据解析和提取
├── converters/  # 格式转换逻辑
├── utils/       # 共享工具
└── formatters/  # 格式特定处理

ui/              # 用户界面组件
templates/       # 构建系统模板
test/            # 综合测试
```

## 🔧 技术栈考虑

### Markdown-it 集成
- **CDN 加载**：项目通过 Tampermonkey 中的 CDN 使用 markdown-it
- **基于令牌的处理**：利用 markdown-it 的令牌系统进行富文本转换
- **插件架构**：考虑 markdown-it 插件以扩展功能
- **Context7 集成**：使用 MCP Context7 获取 markdown-it 文档和最佳实践

### 转换管道
1. **解析**：使用适当的解析器提取结构和内容
2. **转换**：在格式间转换同时保持语义
3. **格式化**：应用一致的格式和样式
4. **验证**：确保双向转换完整性

## 🎯 设计模式

### 模板方法模式
- 使用模板实现一致的结构
- 定义转换流程的标准步骤
- 允许子类重写特定步骤

### 策略模式
- 允许不同的转换策略
- 根据内容类型选择合适的转换器
- 支持可插拔的转换算法

### 观察者模式
- 处理 UI 更新和通知
- 实现事件驱动的架构
- 支持松耦合的组件通信

### 工厂模式
- 为不同内容类型创建适当的对象
- 封装对象创建逻辑
- 支持可扩展的内容类型系统

## 📋 开发指南

### 代码质量
- **清晰意图**：代码应该是自文档化的
- **一致模式**：在整个代码库中使用已建立的模式
- **错误边界**：优雅地处理错误并提供有意义的反馈
- **性能考虑**：考虑对转换速度和内存使用的影响

### 测试策略
- **单元测试**：隔离测试单个组件
- **集成测试**：测试完整的转换管道
- **边缘情况**：考虑不寻常的输入和错误条件
- **双向测试**：确保 MD↔QQ 转换是可逆的
description:
globs:
alwaysApply: false
---
